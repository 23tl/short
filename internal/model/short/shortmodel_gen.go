// Code generated by goctl. DO NOT EDIT!

package short

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shortFieldNames          = builder.RawFieldNames(&Short{})
	shortRows                = strings.Join(shortFieldNames, ",")
	shortRowsExpectAutoSet   = strings.Join(stringx.Remove(shortFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	shortRowsWithPlaceHolder = strings.Join(stringx.Remove(shortFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheShortIdPrefix = "cache:short:id:"
)

type (
	shortModel interface {
		Insert(ctx context.Context, data *Short) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Short, error)
		Update(ctx context.Context, data *Short) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultShortModel struct {
		sqlc.CachedConn
		table string
	}

	Short struct {
		Id          uint64         `db:"id"`          // 自增ID
		OldUrl      string         `db:"old_url"`     // 旧链接
		NewUrl      string         `db:"new_url"`     // 生成的短连接
		Status      int64          `db:"status"`      // 状态
		Visits      int64          `db:"visits"`      // 访问次数
		Extra       sql.NullString `db:"extra"`       // 额外信息
		CreatedTime int64          `db:"createdTime"` // 创建时间
		UpdatedTime int64          `db:"updatedTime"` // 更新时间
		DeletedTime sql.NullInt64  `db:"deletedTime"` // 删除时间
	}
)

func newShortModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultShortModel {
	return &defaultShortModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`short`",
	}
}

func (m *defaultShortModel) Delete(ctx context.Context, id uint64) error {
	shortIdKey := fmt.Sprintf("%s%v", cacheShortIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, shortIdKey)
	return err
}

func (m *defaultShortModel) FindOne(ctx context.Context, id uint64) (*Short, error) {
	shortIdKey := fmt.Sprintf("%s%v", cacheShortIdPrefix, id)
	var resp Short
	err := m.QueryRowCtx(ctx, &resp, shortIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shortRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShortModel) Insert(ctx context.Context, data *Short) (sql.Result, error) {
	shortIdKey := fmt.Sprintf("%s%v", cacheShortIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, shortRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OldUrl, data.NewUrl, data.Status, data.Visits, data.Extra, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	}, shortIdKey)
	return ret, err
}

func (m *defaultShortModel) Update(ctx context.Context, data *Short) error {
	shortIdKey := fmt.Sprintf("%s%v", cacheShortIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shortRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OldUrl, data.NewUrl, data.Status, data.Visits, data.Extra, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	}, shortIdKey)
	return err
}

func (m *defaultShortModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheShortIdPrefix, primary)
}

func (m *defaultShortModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shortRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultShortModel) tableName() string {
	return m.table
}
